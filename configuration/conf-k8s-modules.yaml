---
# This Ansible playbook is used to configure the required kernel modules and sysctl parameters for a Kubernetes cluster.
- name: Configure k8s modules and sysctl params
  hosts: nodes
  become: true
  
  tasks:
    # This task creates a configuration file to load the necessary kernel modules at boot time.
    - name: Configure modules-load.d
      ansible.builtin.copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    # This task loads the required kernel modules using the modprobe command.
    - name: Load k8s modules
      ansible.builtin.modprobe:
        name: "{{ item }}"
      loop:
        - overlay
        - br_netfilter

    # This task sets the required sysctl parameters for network bridging and IP forwarding in a configuration file.
    - name: Configure sysctl params
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/k8s.conf

    # This task applies the sysctl parameters without needing a reboot.
    - name: Apply sysctl params without reboot
      ansible.builtin.command: sysctl --system

    # The next two tasks check if the required kernel modules are loaded.
    - name: Check br_netfilter module
      ansible.builtin.shell: lsmod | grep br_netfilter
      register: br_netfilter_output
      ignore_errors: true

    - name: Check overlay module
      ansible.builtin.shell: lsmod | grep overlay
      register: overlay_output
      ignore_errors: true

    # This task checks the sysctl parameters are set correctly.
    - name: Check sysctl params
      ansible.builtin.command: sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
      register: sysctl_output

    # This task displays the status of the kernel modules and sysctl parameters.
    - name: Display module status and sysctl params
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop:
        - "{{ br_netfilter_output.stdout_lines }}"
        - "{{ overlay_output.stdout_lines }}"
        - "{{ sysctl_output.stdout }}"